
VsCode
ctrl+shift+b
https://code.visualstudio.com/docs/editor/variables-reference
https://code.visualstudio.com/docs/editor/tasks-appendix

 while true; do inotifywait -e close_write  main.cpp; make; done
sudo apt install inotify-tools




{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "make",
            "options": {
                "cwd": "${fileDirname}"
            },
            // Use the standard MS compiler pattern to detect errors, warnings and infos
            "problemMatcher": "$msCompile",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        }
    ]
}












C++ is a statically typed language


variables are passed to a function by value. When calling a function with an argument, 
a new variable is instantiated internally and assigned the value passed in the function call.


void setValueToFive(int x) {
    std::cout << &x << "\n";
    x = 5;
}

int x = 3;
setValueToFive( x );


void setPointerValueToFive(int *x) {
    *x = 5;
}
int x = 3;
setPointerValueToFive( &x );


In C++ (not in C), you can pass a variable by reference by passing in a variable, 
and defining the function's parameter like int &x

void setValueToFiveWithReference(int& x) {
    x = 5;
}
int x = 3;
setValueToFiveWithReference( x );





---------------------------
CLASSES
---------------------------
3 levels of protection for class members in C++: public, private, and protected.

protected members are only accessible to subclasses

protection level defaults to private

defining methods in the header file is known in C++ as inlining.
increase the size of your program
inline definitions of accessors, mutators, and other short, frequently called functions that don't require use of an external library.

Overloading - C++ uses the types of the parameters to determine which version of the function to call. 
Note: NULL is actually an int

You can give default values for parameters of functions in the .H file.
void setValues(int a, int b=5) { m_a = a; m_b = b; }
parameters without default values must precede all the parameters with defaults

//________________________________________________________________________________ 
// CLASS 
//________________________________________________________________________________ 
class Foo {
    public:
    Foo();
    ~Foo();
    int myMethod(int a, int b);

};  // note the semicolon after the class declaration! 

Inheritance

class A {
    public:
    A();
};

class B : public A {
    //________________________________________________________________________________ 
        public:
    //________________________________________________________________________________ 
    B();

};
This says that B has a public superclass A; 


Instance variables can not be assigned a value when declared in the header file; they are initialized in the constructor instead.)

Foo myFooInstance = new Foo(0, 0); // NOT VALID
The new operator returns a pointer to whatever follows it. 

Foo* myFooInstance = new Foo(0, 0);
myFooInstance->bar(); // dereference the pointer and call the method
Foo myFooInstance(0, 0);
Foo myFooInstance; // same as Foo myFooInstance();

References are essentially the same as pointers, except that they are dereferenced like instances, can never be NULL, and can only be assigned to once, at creation.
References are used most commonly when dealing with parameters
int foo = 10;
int& bar = foo;


 
Foo* fooPointer = new Foo(0, 0); // create a pointer to Foo and give it a
                             // value
Foo myFooInstance = *fooPointer; // dereference the pointer and assign it
                             // to myFooInstance; copy is made (!)

A copy constructor is a constructor that is invoked when one instance of a class is initialized with another instance of the same type.
The syntax for a copy constructor is:

class Foo {
    Foo(const Foo &classToCopy); // copy constructor
};

local storage: valid only within a certain scope. Local storage is also known as automatic memory or storage on the stack.
global storage: valid throughout the execution of the program. Global storage is also called the free store, dynamic memory, or storage on the heap.

In C++, we can request a block of memory in global storage for certain data types by using new, and we return the memory by using delete.
only objects created using new should be deleted with delete!









Managing memory: Parameters







The #define preprocessor directive will tell the preprocessor to do text substitution. For example, the following directive will substitute every occurrence of FIVE with the number 5:

#define FIVE 5

#define COMPILE_SECTION
#ifdef COMPILE_SECTION
#endif

#ifndef Foo_Header
#define Foo_Header
// put all of the header file in here!!
#endif


#ifndef _FOO_H_ALREADY_INCLUDED_
#define _FOO_H_ALREADY_INCLUDED_
#endif


------------------
LAMBDA

void print(const std::string &s)
{
	std::for_each(s.begin(), s.end(), [] (char const &c) {
		std::cout << c << ' ';
	});
}


--------------
 string

    aLine.erase(10, 1);
    aLine.erase(6, 1);
    aLine.erase(1, 1);
    aLine.erase(0, 1);

interate string

 	for (char const &c: aLine) {
  
	}

          for (auto it = s.cbegin() ; it != s.cend(); ++it) {
        std::cout << *it << ' ';
    }


void print(const std::string &s)
{
    for (std::string::size_type i = 0; i < s.size(); i++) {
        std::cout << s[i] << ' ';
    }
}




https://github.com/catchorg/Catch2